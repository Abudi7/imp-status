{# Calender javascript #}
{# 
<style>
 .calendar-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: #fff;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
  }

  .row {
    display: flex;
  }

  .col {
    flex: 1;
    text-align: center;
    border: 1px solid #ccc;
    padding: 10px;
  }

  .day {
    padding: 5px;
    font-size: 16px;
  }

  .current-month {
    background-color: #ffffff;
  }

  .other-month {
    background-color: #f3f3f3;
  }

  .current-day {
    background-color: #45caff;
    color: #fff;
    font-weight: bold;
  }
</style>

<div class="container">
  <div class="row">
    <div class="col-12 text-center mb-3">
      <h2 id="monthDisplay"></h2>
    </div>
  </div>
  <div class="row">
    <div class="col-12 text-center mb-3">
      <button id="prevButton" class="btn btn-secondary mr-2">&lt;</button>
      <button id="monthButton" class="btn btn-secondary mr-2">Month</button>
      <button id="weekButton" class="btn btn-secondary mr-2">Week</button>
      <button id="dayButton" class="btn btn-secondary mr-2">Day</button>
      <button id="todayButton" class="btn btn-secondary mr-2">Today</button>
      <button id="nextButton" class="btn btn-secondary">&gt;</button>
    </div>
  </div>
  <div id="calendarView"></div>
</div>


<script>
  var currentDate = new Date();
  var currentView = "month";

  // Function to render the calendar based on the current view
  function renderCalendar() {
    var calendarView = document.getElementById("calendarView");
    calendarView.innerHTML = "";

    if (currentView === "month") {
      renderMonthView(calendarView);
    } else if (currentView === "week") {
      renderWeekView(calendarView);
    } else if (currentView === "day") {
      renderDayView(calendarView);
    }
  }

// Function to fetch maintenance events from the server and add them to the calendar
function fetchAndAddEvents() {
  // Simulating the sample event data
  var eventData = [
    {
      id: 1,
      title: 'Sample Event',
      borderColor: 'rgb(255, 201, 73)',
      start: '2023-06-05T10:00:00',
      end: '2023-06-05T12:00:00',
      url: '/system-status/1'
    }
  ];

  eventData.forEach(function (event) {
    addEventToCalendar(event);
  });
}

// Function to add an event to the calendar
function addEventToCalendar(event) {
  calendar.addEvent(event);
}

  // Function to render the month view
function renderMonthView(calendarView) {
  // Display the current month and year in the header
  var monthDisplay = document.getElementById("monthDisplay");
  var currentDate = new Date(); // Get the current date from the server or local computer
  monthDisplay.textContent = currentDate.toLocaleDateString(undefined, {
    weekday: "long",
    day: "numeric",
    month: "long",
    year: "numeric",
  });

  // Render the day names at the top
  var daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
  var dayNamesRow = document.createElement("div");
  dayNamesRow.classList.add("row", "text-center", "font-weight-bold", "mb-2");
  dayNamesRow.style.backgroundColor = "#45caff";
  for (var i = 0; i < daysOfWeek.length; i++) {
    var dayNameElement = document.createElement("div");
    dayNameElement.classList.add("col");
    dayNameElement.textContent = daysOfWeek[i].substring(0, 3); // Display abbreviated day names
    dayNamesRow.appendChild(dayNameElement);
  }

  calendarView.appendChild(dayNamesRow);

  // Render all the days of the month
  var currentMonth = currentDate.getMonth();
  var firstDayOfMonth = new Date(currentDate.getFullYear(), currentMonth, 1);
  var lastDayOfMonth = new Date(currentDate.getFullYear(), currentMonth + 1, 0);
  var startDate = new Date(firstDayOfMonth);
  var startDay = (startDate.getDay() + 6) % 7; // Get the index of the start day (adjusted for Monday)

  startDate.setDate(startDate.getDate() - startDay); // Start from the previous Monday

  while (startDate <= lastDayOfMonth) {
    var row = document.createElement("div");
    row.classList.add("row", "text-center");

    for (var i = 0; i < 7; i++) {
      var dayElement = document.createElement("div");
      dayElement.classList.add("col", "day");

      if (startDate.getMonth() === currentMonth) {
        dayElement.classList.add("current-month");
      } else {
        dayElement.classList.add("other-month");
      }

      dayElement.textContent = startDate.getDate();

      if (startDate.toDateString() === new Date().toDateString()) {
        dayElement.classList.add("current-day");
      }

      row.appendChild(dayElement);
      startDate.setDate(startDate.getDate() + 1);
    }

    calendarView.appendChild(row);
  }
}


// Function to render the week view
function renderWeekView(calendarView) {
  // Display the current week range in the header
  var monthDisplay = document.getElementById("monthDisplay");
  var startOfWeek = getStartOfWeek(currentDate);
  var endOfWeek = new Date(startOfWeek);
  endOfWeek.setDate(startOfWeek.getDate() + 6);
  var weekRange = "Week " + getWeekNumber(startOfWeek) + " | " + startOfWeek.toLocaleDateString(undefined, {
    month: "long",
    year: "numeric",
  });
  monthDisplay.textContent = weekRange;

  // Render the day names at the top
  var daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  var dayNamesRow = document.createElement("div");
  dayNamesRow.classList.add("row", "text-center", "font-weight-bold", "mb-2");
  dayNamesRow.style.backgroundColor = "#f0f0f0";
  for (var i = 0; i < daysOfWeek.length; i++) {
    var dayNameElement = document.createElement("div");
    dayNameElement.classList.add("col");
    dayNameElement.textContent = daysOfWeek[i].substring(0, 3); // Display abbreviated day names
    dayNamesRow.appendChild(dayNameElement);
  }

  calendarView.appendChild(dayNamesRow);

  // Render the week's dates
  var startDate = new Date(startOfWeek);

  var row = document.createElement("div");
  row.classList.add("row", "text-center");

  for (var i = 0; i < 7; i++) {
    var dayElement = document.createElement("div");
    dayElement.classList.add("col", "day");

    if (startDate.toDateString() === new Date().toDateString()) {
      dayElement.classList.add("current-day");
    }

    dayElement.textContent = startDate.getDate();

    row.appendChild(dayElement);
    startDate.setDate(startDate.getDate() + 1);
  }

  calendarView.appendChild(row);
}

// Function to get the week number of a date
function getWeekNumber(date) {
  var firstDayOfYear = new Date(date.getFullYear(), 0, 1);
  var pastDaysOfYear = (date - firstDayOfYear) / 86400000;
  return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
}

  // Function to render the day view
  function renderDayView(calendarView) {
    // Display the current day in the header
    var monthDisplay = document.getElementById("monthDisplay");
    monthDisplay.textContent = currentDate.toLocaleDateString(undefined, { weekday: "long", month: "long", day: "numeric" });

    // Render the hours of the day
    for (var i = 0; i < 24; i++) {
      var row = document.createElement("div");
      row.classList.add("row", "text-center");

      var hourElement = document.createElement("div");
      hourElement.classList.add("col", "hour");
      hourElement.textContent = i + ":00";

      row.appendChild(hourElement);
      calendarView.appendChild(row);
    }
  }

  // Function to get the start of the week (Sunday)
  function getStartOfWeek(date) {
    var startOfWeek = new Date(date);
    var day = startOfWeek.getDay();
    var diff = startOfWeek.getDate() - day;

    startOfWeek.setDate(diff);
    startOfWeek.setHours(0, 0, 0, 0);

    return startOfWeek;
  }

  // Event listeners for the navigation buttons
  document.getElementById("prevButton").addEventListener("click", function () {
    if (currentView === "month") {
      currentDate.setMonth(currentDate.getMonth() - 1);
    } else if (currentView === "week") {
      currentDate.setDate(currentDate.getDate() - 7);
    } else if (currentView === "day") {
      currentDate.setDate(currentDate.getDate() - 1);
    }
    renderCalendar();
  });

  document.getElementById("nextButton").addEventListener("click", function () {
    if (currentView === "month") {
      currentDate.setMonth(currentDate.getMonth() + 1);
    } else if (currentView === "week") {
      currentDate.setDate(currentDate.getDate() + 7);
    } else if (currentView === "day") {
      currentDate.setDate(currentDate.getDate() + 1);
    }
    renderCalendar();
  });

  // Event listeners for the view buttons
  document.getElementById("monthButton").addEventListener("click", function () {
    currentView = "month";
    renderCalendar();
  });

  document.getElementById("weekButton").addEventListener("click", function () {
    currentView = "week";
    renderCalendar();
  });

  document.getElementById("dayButton").addEventListener("click", function () {
    currentView = "day";
    renderCalendar();
  });

  // Event listener for the today button
  document.getElementById("todayButton").addEventListener("click", function () {
    currentDate = new Date();
    renderCalendar();
  });

  // Initial rendering of the calendar
  renderCalendar();
</script> #}