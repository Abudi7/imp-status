{% extends 'base.html.twig' %}

{% block body %}
    <div class="container">
    <h2 class="bg-danger text-center text-white rounded-pill ">Create New Incident Event</h2>
    {{ form_start(form) }}
    {{ form_row(form.system) }}
    {# {{ form_row(form.creator) }} #}
    {{ form_row(form.info) }}
    {{ form_row(form.type) }}
    {{ form_row(form.emailtemplate, {'attr': {'class': 'template-select'}}) }}
    {{ form_row(form.subject, {'attr': {'class': 'subject-field subject-text readonly'}}) }}
    {{ form_row(form.email, {'attr': {'class': 'email-field template-textarea readonly'}}) }}
    {{ form_row(form.send_email) }}
    <button type="submit" class="btn btn-primary">Create Event</button>
    {{ form_end(form) }}
</div>

<script>
    // Add event listener to emailtemplate dropdown for content
    const templateSelect = document.querySelector('.template-select');
    const emailField = document.querySelector('.email-field');
    
    templateSelect.addEventListener('change', () => {
        const selectedTemplateId = templateSelect.value;
        if (selectedTemplateId) {
            fetch(`http://localhost:8080/public/template/${selectedTemplateId}/get-template-content/`)
                .then(response => response.text())
                .then(content => {
                     const filledContent = JSON.parse(content); // Replace placeholders
                    console.log(JSON.parse(content))
                    console.log(`http://localhost:8080/public/template/${selectedTemplateId}/get-template-content/`)
                    emailField.value = filledContent; // Populate email textarea
                })
                .catch(error => {
                    console.error('Error fetching template content:', error);
                });
        } else {
            emailField.value = '';
            emailField.disabled = true;
            emailField.classList.add('readonly');
        }
    });

    // Add event listener to emailtemplate dropdown for subject
    const subjectField = document.querySelector('.subject-field');
    
    templateSelect.addEventListener('change', () => {
        const selectedTemplateId = templateSelect.value;
        if (selectedTemplateId) {
            fetch(`http://localhost:8080/public/template/${selectedTemplateId}/get-template-subject/`)
                .then(response => response.text())
                .then(subject => {
                    const filledSubject = JSON.parse(subject); // Replace subject placeholders
                    subjectField.value = filledSubject;
                })
                .catch(error => {
                    console.error('Error fetching template subject:', error);
                });
        } else {
            subjectField.value = '';
            subjectField.disabled = true;
            subjectField.classList.add('readonly');
        }
    });

    // Function to replace subjectContent placeholders
    function fillSubjectContentPlaceholders(templateSubject) {
        const placeholders = {
            // Define your subject placeholders here
            system_name: '{{ form.vars.value.system.name }}', // Use the actual system name from the JavaScript variable
            maintenance_date: '{{ form.vars.value.start|date('H:i d-M-Y') }}', // Replace with actual value
            start_time: '{{ form.vars.value.start|date('H:i d-M-Y') }}', // Replace with actual value
            end_time: '{{ form.vars.value.end|date('H:i d-M-Y') }}',
            responsible_person: '{{ form.vars.value.creator.email }}', // Replace with actual value
        };

        for (const placeholder in placeholders) {
            
            templateSubject = templateSubject.replaceAll(`{${placeholder}}`, placeholders[placeholder]);
            
        }

        return templateSubject;
    }
</script>
{% endblock %}